{"version":3,"file":"static/js/775.531e7702.chunk.js","mappings":"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","sources":["services/uploadService.ts"],"sourcesContent":["// Servi√ßo de upload para Cloudflare R2 usando AWS SDK v2\r\n// Compat√≠vel com navegadores e evita problemas de CORS\r\n\r\n// Configura√ß√£o do Cloudflare R2\r\nconst R2_ENDPOINT = 'https://d20101af9dd64057603c4871abeb1b0c.r2.cloudflarestorage.com';\r\nconst R2_BUCKET = 'boodesk-cdn';\r\nconst R2_ACCESS_KEY_ID = process.env.REACT_APP_R2_ACCESS_KEY_ID || '';\r\nconst R2_SECRET_ACCESS_KEY = process.env.REACT_APP_R2_SECRET_ACCESS_KEY || '';\r\n\r\n// Importar AWS SDK v2\r\ndeclare global {\r\n  interface Window {\r\n    AWS: any;\r\n  }\r\n}\r\n\r\nconst AWS = window.AWS;\r\n\r\nexport interface UploadFile {\r\n  file: File;\r\n  folder?: string;\r\n  fileName?: string;\r\n  contentType?: string;\r\n}\r\n\r\nexport interface UploadResult {\r\n  success: boolean;\r\n  url?: string;\r\n  key?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface FileInfo {\r\n  key: string;\r\n  url: string;\r\n  size: number;\r\n  contentType: string;\r\n  uploadedAt: Date;\r\n}\r\n\r\nclass UploadService {\r\n  /**\r\n   * Configura o cliente AWS S3 para R2\r\n   */\r\n  private getS3Client() {\r\n    // Verificar se AWS SDK est√° dispon√≠vel\r\n    if (typeof AWS === 'undefined') {\r\n      throw new Error('AWS SDK n√£o est√° carregado. Verifique se o script est√° inclu√≠do no index.html');\r\n    }\r\n\r\n    // Configurar AWS SDK\r\n    AWS.config.update({\r\n      accessKeyId: R2_ACCESS_KEY_ID,\r\n      secretAccessKey: R2_SECRET_ACCESS_KEY,\r\n      region: 'auto'\r\n    });\r\n\r\n    // Criar cliente S3 para R2\r\n    return new AWS.S3({\r\n      endpoint: R2_ENDPOINT,\r\n      s3ForcePathStyle: true,\r\n      signatureVersion: 'v4'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Faz upload de um arquivo para o Cloudflare R2 usando AWS SDK v2\r\n   */\r\n  async uploadFile(uploadFile: UploadFile): Promise<UploadResult> {\r\n    try {\r\n      const { file, folder = '', fileName, contentType } = uploadFile;\r\n      \r\n      // Verificar se as credenciais est√£o configuradas\r\n      if (!R2_ACCESS_KEY_ID || !R2_SECRET_ACCESS_KEY) {\r\n        throw new Error('Credenciais R2 n√£o configuradas');\r\n      }\r\n      \r\n      // Gera nome √∫nico para o arquivo\r\n      const fileExtension = file.name.split('.').pop();\r\n      const uniqueFileName = fileName || `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExtension}`;\r\n      const key = folder ? `${folder}/${uniqueFileName}` : uniqueFileName;\r\n\r\n      console.log('üîÑ Iniciando upload:', {\r\n        fileName: file.name,\r\n        fileSize: file.size,\r\n        fileType: file.type,\r\n        key: key\r\n      });\r\n\r\n      // Obter cliente S3\r\n      const s3 = this.getS3Client();\r\n      \r\n      console.log('üîÑ Fazendo upload com AWS SDK...');\r\n      \r\n      // Par√¢metros do upload\r\n      const params = {\r\n        Bucket: R2_BUCKET,\r\n        Key: key,\r\n        Body: file,\r\n        ContentType: contentType || file.type,\r\n        Metadata: {\r\n          originalName: file.name,\r\n          uploadedBy: 'boodesk-app',\r\n          uploadedAt: new Date().toISOString(),\r\n        }\r\n      };\r\n\r\n      // Fazer upload usando AWS SDK\r\n      const result = await new Promise<any>((resolve, reject) => {\r\n        s3.upload(params, (err: any, data: any) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(data);\r\n          }\r\n        });\r\n      });\r\n\r\n      console.log('‚úÖ Upload funcionou:', result);\r\n      const url = `${R2_ENDPOINT}/${R2_BUCKET}/${key}`;\r\n      \r\n      return {\r\n        success: true,\r\n        url,\r\n        key,\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Erro no upload:', {\r\n        error: error,\r\n        message: error instanceof Error ? error.message : 'Erro desconhecido',\r\n        name: error instanceof Error ? error.name : 'Unknown',\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      });\r\n      \r\n      // Determinar o tipo de erro\r\n      let errorMessage = 'Erro desconhecido no upload';\r\n      \r\n      if (error instanceof Error) {\r\n        if (error.message.includes('Access Denied')) {\r\n          errorMessage = 'Acesso negado - verifique as permiss√µes do token R2';\r\n        } else if (error.message.includes('NetworkError')) {\r\n          errorMessage = 'Erro de rede - verifique a conex√£o com a internet';\r\n        } else if (error.message.includes('CORS')) {\r\n          errorMessage = 'Erro CORS - verifique a configura√ß√£o CORS do bucket';\r\n        } else if (error.message.includes('Failed to fetch')) {\r\n          errorMessage = 'Falha na requisi√ß√£o - verifique o endpoint e credenciais';\r\n        } else if (error.message.includes('readableStream.getReader')) {\r\n          errorMessage = 'Erro de compatibilidade com navegador - tentando m√©todo alternativo';\r\n        } else {\r\n          errorMessage = error.message;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: errorMessage,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Faz upload de m√∫ltiplos arquivos\r\n   */\r\n  async uploadMultipleFiles(files: UploadFile[]): Promise<UploadResult[]> {\r\n    const uploadPromises = files.map(file => this.uploadFile(file));\r\n    return Promise.all(uploadPromises);\r\n  }\r\n\r\n  /**\r\n   * Gera URL p√∫blica para download\r\n   */\r\n  getPublicUrl(key: string): string {\r\n    return `${R2_ENDPOINT}/${R2_BUCKET}/${key}`;\r\n  }\r\n\r\n  /**\r\n   * Deleta um arquivo do R2\r\n   */\r\n  async deleteFile(key: string): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      // Verificar se as credenciais est√£o configuradas\r\n      if (!R2_ACCESS_KEY_ID || !R2_SECRET_ACCESS_KEY) {\r\n        return {\r\n          success: false,\r\n          error: 'Credenciais R2 n√£o configuradas'\r\n        };\r\n      }\r\n\r\n      console.log('üóëÔ∏è Deletando arquivo do R2:', key);\r\n\r\n      // Obter cliente S3\r\n      const s3 = this.getS3Client();\r\n      \r\n      // Par√¢metros para deletar\r\n      const params = {\r\n        Bucket: R2_BUCKET,\r\n        Key: key\r\n      };\r\n\r\n      // Deletar arquivo do R2\r\n      await s3.deleteObject(params).promise();\r\n      \r\n      console.log('‚úÖ Arquivo deletado com sucesso do R2:', key);\r\n      \r\n      return {\r\n        success: true\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Erro ao deletar arquivo do R2:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido ao deletar arquivo'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gera URL assinada para download privado (simulada)\r\n   */\r\n  async getSignedDownloadUrl(key: string, expiresIn: number = 3600): Promise<string> {\r\n    // Implementa√ß√£o simplificada - retorna URL p√∫blica\r\n    return this.getPublicUrl(key);\r\n  }\r\n\r\n  /**\r\n   * Valida tipo de arquivo\r\n   */\r\n  validateFileType(file: File, allowedTypes: string[]): boolean {\r\n    return allowedTypes.includes(file.type);\r\n  }\r\n\r\n  /**\r\n   * Valida tamanho do arquivo\r\n   */\r\n  validateFileSize(file: File, maxSizeMB: number): boolean {\r\n    const maxSizeBytes = maxSizeMB * 1024 * 1024;\r\n    return file.size <= maxSizeBytes;\r\n  }\r\n\r\n  /**\r\n   * Gera preview de imagem\r\n   */\r\n  generateImagePreview(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!file.type.startsWith('image/')) {\r\n        reject(new Error('Arquivo n√£o √© uma imagem'));\r\n        return;\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        resolve(e.target?.result as string);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Comprime imagem antes do upload\r\n   */\r\n  async compressImage(file: File, quality: number = 0.8): Promise<File> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!file.type.startsWith('image/')) {\r\n        resolve(file);\r\n        return;\r\n      }\r\n\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      img.onload = () => {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx?.drawImage(img, 0, 0);\r\n\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            if (blob) {\r\n              const compressedFile = new File([blob], file.name, {\r\n                type: file.type,\r\n                lastModified: Date.now(),\r\n              });\r\n              resolve(compressedFile);\r\n            } else {\r\n              reject(new Error('Falha na compress√£o da imagem'));\r\n            }\r\n          },\r\n          file.type,\r\n          quality\r\n        );\r\n      };\r\n\r\n      img.onerror = reject;\r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Upload com compress√£o autom√°tica para imagens\r\n   */\r\n  async uploadImageWithCompression(\r\n    file: File,\r\n    folder: string = '',\r\n    quality: number = 0.8\r\n  ): Promise<UploadResult> {\r\n    try {\r\n      const compressedFile = await this.compressImage(file, quality);\r\n      return this.uploadFile({\r\n        file: compressedFile,\r\n        folder,\r\n        contentType: file.type,\r\n      });\r\n    } catch (error) {\r\n      console.error('Erro no upload com compress√£o:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro no upload com compress√£o',\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Inst√¢ncia global do servi√ßo\r\nexport const uploadService = new UploadService();\r\n\r\n// Tipos de arquivo permitidos\r\nexport const ALLOWED_FILE_TYPES = {\r\n  images: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\r\n  documents: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\r\n  spreadsheets: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\r\n  presentations: ['application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],\r\n  archives: ['application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed'],\r\n};\r\n\r\n// Tamanhos m√°ximos (em MB)\r\nexport const MAX_FILE_SIZES = {\r\n  images: 10,\r\n  documents: 50,\r\n  spreadsheets: 50,\r\n  presentations: 100,\r\n  archives: 200,\r\n  default: 100,\r\n};\r\n"],"names":["R2_ENDPOINT","R2_BUCKET","R2_ACCESS_KEY_ID","process","R2_SECRET_ACCESS_KEY","AWS","window","uploadService","getS3Client","Error","config","update","accessKeyId","secretAccessKey","region","S3","endpoint","s3ForcePathStyle","signatureVersion","uploadFile","file","folder","fileName","contentType","fileExtension","name","split","pop","uniqueFileName","concat","Date","now","Math","random","toString","substring","key","console","log","fileSize","size","fileType","type","s3","this","params","Bucket","Key","Body","ContentType","Metadata","originalName","uploadedBy","uploadedAt","toISOString","result","Promise","resolve","reject","upload","err","data","success","url","error","message","stack","undefined","errorMessage","includes","uploadMultipleFiles","files","uploadPromises","map","all","getPublicUrl","deleteFile","deleteObject","promise","getSignedDownloadUrl","validateFileType","allowedTypes","validateFileSize","maxSizeMB","maxSizeBytes","generateImagePreview","startsWith","reader","FileReader","onload","e","_e$target","target","onerror","readAsDataURL","compressImage","quality","arguments","length","canvas","document","createElement","ctx","getContext","img","Image","width","height","drawImage","toBlob","blob","compressedFile","File","lastModified","src","URL","createObjectURL","uploadImageWithCompression"],"sourceRoot":""}