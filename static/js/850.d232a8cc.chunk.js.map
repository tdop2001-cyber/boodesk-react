{"version":3,"file":"static/js/850.d232a8cc.chunk.js","mappings":"sJAIA,MAAMA,EAAc,oEACdC,EAAY,cACZC,EAAmBC,mCACnBC,EAAuBD,mEASvBE,EAAMC,OAAOD,IAqOZ,MAAME,EAAkB,IAjN/B,MAIUC,WAAAA,GAEN,GAAmB,qBAARH,EACT,MAAM,IAAII,MAAM,6FAWlB,OAPAJ,EAAIK,OAAOC,OAAO,CAChBC,YAAaV,EACbW,gBAAiBT,EACjBU,OAAQ,SAIH,IAAIT,EAAIU,GAAG,CAChBC,SAAUhB,EACViB,kBAAkB,EAClBC,iBAAkB,MAEtB,CAKA,eAAMC,GAA+E,IAArEC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACrD,IAAK,IAADI,EAEuB,EAIzBC,QAAQC,IAAI,2CAGZ,MAAMC,EAAKC,KAAKrB,cAGVsB,GAAMC,EAAAA,EAAAA,GAAA,CACVC,OAAQ/B,EACRgC,QAAST,GACLJ,GAAU,CAAEc,OAAQd,IAIpBe,QAAe,IAAIC,QAAa,CAACC,EAASC,KAC9CV,EAAGW,cAAcT,EAAQ,CAACU,EAAUC,KAC9BD,EACFF,EAAOE,GAEPH,EAAQI,OAKdf,QAAQC,IAAI,iCAAwC,QAAfF,EAAAU,EAAOO,gBAAQ,IAAAjB,OAAA,EAAfA,EAAiBH,SAAU,EAAG,YAuBnE,MAAO,CACLqB,SAAS,EACTC,OAtByBT,EAAOO,UAAY,IAAIG,IAAKC,IACrD,MAAMC,EAAMD,EAAIE,IACVC,EAAOF,EAAIG,SAAS,KAAOH,EAAII,MAAM,KAAKC,MAAQL,EAClDM,EAAUxB,KAAKyB,YAAYL,GAC3BM,EAAa1B,KAAK2B,eAAeP,GACjCQ,EAAY5B,KAAK6B,cAAcT,GAErC,MAAO,CACLF,MACAE,OACAU,KAAMb,EAAIc,KACVC,KAAMhC,KAAKiC,YAAYb,GACvBc,IAAI,GAADC,OAAKhE,EAAW,KAAAgE,OAAI/D,EAAS,KAAA+D,OAAIjB,GACpCkB,WAAY,IAAIC,KAAKpB,EAAIqB,cACzBd,UACAE,aACAE,eASN,CAAE,MAAOW,GAGP,OAFA1C,QAAQ0C,MAAM,kCAA8BA,GAErC,CACLzB,SAAS,EACTyB,MAAOA,aAAiB3D,MAAQ2D,EAAMC,QAAU,oBAEpD,CACF,CAKA,mBAAMC,GAA8D,IAAhD9C,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACpC,IACE,MAAMc,QAAeN,KAAKV,UAAU,GAAIK,GAExC,GAAIW,EAAOQ,SAAWR,EAAOS,MAAO,CAIlC,MAAO,CACLD,SAAS,EACTC,MAJgBT,EAAOS,MAAM2B,OAAOC,IAASA,EAAKzB,IAAIG,SAAS,MAMnE,CAEA,OAAOf,CACT,CAAE,MAAOiC,GACP,MAAO,CACLzB,SAAS,EACTyB,MAAOA,aAAiB3D,MAAQ2D,EAAMC,QAAU,kCAEpD,CACF,CAKA,qBAAMI,CAAgBC,GAAgE,IAAhDlD,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtD,MAAMD,EAASsD,EAAOC,SAAS,KAAOD,EAAM,GAAAV,OAAMU,EAAM,KACxD,OAAO7C,KAAKV,UAAUC,EAAQI,EAChC,CAKQ8B,WAAAA,CAAYsB,GAClB,MACMC,EAAMD,EAASE,cAAcC,UAAUH,EAASI,YAAY,MAClE,MAFwB,CAAC,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAEpD9B,SAAS2B,EAClC,CAKQrB,cAAAA,CAAeoB,GACrB,MACMC,EAAMD,EAASE,cAAcC,UAAUH,EAASI,YAAY,MAClE,MAF2B,CAAC,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAE3C9B,SAAS2B,EACrC,CAKQnB,aAAAA,CAAckB,GACpB,MACMC,EAAMD,EAASE,cAAcC,UAAUH,EAASI,YAAY,MAClE,MAF0B,CAAC,OAAQ,OAAQ,MAAO,OAAQ,OAEjC9B,SAAS2B,EACpC,CAKQf,WAAAA,CAAYc,GAkBlB,MAf6C,CAC3C,OAAQ,aACR,QAAS,aACT,OAAQ,YACR,OAAQ,YACR,QAAS,aACT,OAAQ,kBACR,OAAQ,qBACR,QAAS,0EACT,OAAQ,aACR,OAAQ,kBACR,OAAQ,+BACR,MAAO,+BAdGA,EAASE,cAAcC,UAAUH,EAASI,YAAY,QAiBzC,0BAC3B,CAKAC,cAAAA,CAAeC,GACb,GAAc,IAAVA,EAAa,MAAO,UAExB,MAEMC,EAAIC,KAAKC,MAAMD,KAAKzD,IAAIuD,GAASE,KAAKzD,IAFlC,OAIV,OAAO2D,YAAYJ,EAAQE,KAAKG,IAJtB,KAI6BJ,IAAIK,QAAQ,IAAM,IAH3C,CAAC,QAAS,KAAM,KAAM,MAGiCL,EACvE,CAKAM,gBAAAA,CAAiBC,GACf,OAAOA,EAAKC,mBAAmB,QAAS,CACtCC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,WAEZ,E","sources":["services/fileListService.ts"],"sourcesContent":["// Servi√ßo para listar arquivos do Cloudflare R2\r\n// Permite visualizar os arquivos enviados no aplicativo\r\n\r\n// Configura√ß√£o do Cloudflare R2\r\nconst R2_ENDPOINT = 'https://d20101af9dd64057603c4871abeb1b0c.r2.cloudflarestorage.com';\r\nconst R2_BUCKET = 'boodesk-cdn';\r\nconst R2_ACCESS_KEY_ID = process.env.REACT_APP_R2_ACCESS_KEY_ID || '';\r\nconst R2_SECRET_ACCESS_KEY = process.env.REACT_APP_R2_SECRET_ACCESS_KEY || '';\r\n\r\n// Importar AWS SDK v2\r\ndeclare global {\r\n  interface Window {\r\n    AWS: any;\r\n  }\r\n}\r\n\r\nconst AWS = window.AWS;\r\n\r\nexport interface FileItem {\r\n  key: string;\r\n  name: string;\r\n  size: number;\r\n  type: string;\r\n  url: string;\r\n  uploadedAt: Date;\r\n  isImage: boolean;\r\n  isDocument: boolean;\r\n  isArchive: boolean;\r\n}\r\n\r\nexport interface FileListResult {\r\n  success: boolean;\r\n  files?: FileItem[];\r\n  error?: string;\r\n}\r\n\r\nclass FileListService {\r\n  /**\r\n   * Configura o cliente AWS S3 para R2\r\n   */\r\n  private getS3Client() {\r\n    // Verificar se AWS SDK est√° dispon√≠vel\r\n    if (typeof AWS === 'undefined') {\r\n      throw new Error('AWS SDK n√£o est√° carregado. Verifique se o script est√° inclu√≠do no index.html');\r\n    }\r\n\r\n    // Configurar AWS SDK\r\n    AWS.config.update({\r\n      accessKeyId: R2_ACCESS_KEY_ID,\r\n      secretAccessKey: R2_SECRET_ACCESS_KEY,\r\n      region: 'auto'\r\n    });\r\n\r\n    // Criar cliente S3 para R2\r\n    return new AWS.S3({\r\n      endpoint: R2_ENDPOINT,\r\n      s3ForcePathStyle: true,\r\n      signatureVersion: 'v4'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Lista arquivos do R2\r\n   */\r\n  async listFiles(prefix: string = '', maxKeys: number = 50): Promise<FileListResult> {\r\n    try {\r\n      // Verificar se as credenciais est√£o configuradas\r\n      if (!R2_ACCESS_KEY_ID || !R2_SECRET_ACCESS_KEY) {\r\n        throw new Error('Credenciais R2 n√£o configuradas');\r\n      }\r\n\r\n      console.log('üîÑ Listando arquivos do R2...');\r\n\r\n      // Obter cliente S3\r\n      const s3 = this.getS3Client();\r\n\r\n      // Par√¢metros da listagem\r\n      const params = {\r\n        Bucket: R2_BUCKET,\r\n        MaxKeys: maxKeys,\r\n        ...(prefix && { Prefix: prefix })\r\n      };\r\n\r\n      // Listar objetos\r\n      const result = await new Promise<any>((resolve, reject) => {\r\n        s3.listObjectsV2(params, (err: any, data: any) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(data);\r\n          }\r\n        });\r\n      });\r\n\r\n      console.log('‚úÖ Listagem conclu√≠da:', result.Contents?.length || 0, 'arquivos');\r\n\r\n      // Converter para formato do aplicativo\r\n      const files: FileItem[] = (result.Contents || []).map((obj: any) => {\r\n        const key = obj.Key;\r\n        const name = key.includes('/') ? key.split('/').pop() : key;\r\n        const isImage = this.isImageFile(name);\r\n        const isDocument = this.isDocumentFile(name);\r\n        const isArchive = this.isArchiveFile(name);\r\n\r\n        return {\r\n          key,\r\n          name,\r\n          size: obj.Size,\r\n          type: this.getFileType(name),\r\n          url: `${R2_ENDPOINT}/${R2_BUCKET}/${key}`,\r\n          uploadedAt: new Date(obj.LastModified),\r\n          isImage,\r\n          isDocument,\r\n          isArchive\r\n        };\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        files\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Erro ao listar arquivos:', error);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro desconhecido'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista apenas arquivos na raiz (sem pasta)\r\n   */\r\n  async listRootFiles(maxKeys: number = 50): Promise<FileListResult> {\r\n    try {\r\n      const result = await this.listFiles('', maxKeys);\r\n      \r\n      if (result.success && result.files) {\r\n        // Filtrar apenas arquivos na raiz (sem /)\r\n        const rootFiles = result.files.filter(file => !file.key.includes('/'));\r\n        \r\n        return {\r\n          success: true,\r\n          files: rootFiles\r\n        };\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Erro ao listar arquivos da raiz'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista arquivos de uma pasta espec√≠fica\r\n   */\r\n  async listFolderFiles(folder: string, maxKeys: number = 50): Promise<FileListResult> {\r\n    const prefix = folder.endsWith('/') ? folder : `${folder}/`;\r\n    return this.listFiles(prefix, maxKeys);\r\n  }\r\n\r\n  /**\r\n   * Verifica se √© arquivo de imagem\r\n   */\r\n  private isImageFile(filename: string): boolean {\r\n    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];\r\n    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\r\n    return imageExtensions.includes(ext);\r\n  }\r\n\r\n  /**\r\n   * Verifica se √© arquivo de documento\r\n   */\r\n  private isDocumentFile(filename: string): boolean {\r\n    const documentExtensions = ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'];\r\n    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\r\n    return documentExtensions.includes(ext);\r\n  }\r\n\r\n  /**\r\n   * Verifica se √© arquivo compactado\r\n   */\r\n  private isArchiveFile(filename: string): boolean {\r\n    const archiveExtensions = ['.zip', '.rar', '.7z', '.tar', '.gz'];\r\n    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\r\n    return archiveExtensions.includes(ext);\r\n  }\r\n\r\n  /**\r\n   * Obt√©m o tipo MIME do arquivo\r\n   */\r\n  private getFileType(filename: string): string {\r\n    const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\r\n    \r\n    const mimeTypes: { [key: string]: string } = {\r\n      '.jpg': 'image/jpeg',\r\n      '.jpeg': 'image/jpeg',\r\n      '.png': 'image/png',\r\n      '.gif': 'image/gif',\r\n      '.webp': 'image/webp',\r\n      '.pdf': 'application/pdf',\r\n      '.doc': 'application/msword',\r\n      '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      '.txt': 'text/plain',\r\n      '.zip': 'application/zip',\r\n      '.rar': 'application/x-rar-compressed',\r\n      '.7z': 'application/x-7z-compressed'\r\n    };\r\n\r\n    return mimeTypes[ext] || 'application/octet-stream';\r\n  }\r\n\r\n  /**\r\n   * Formata o tamanho do arquivo\r\n   */\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes === 0) return '0 Bytes';\r\n    \r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  /**\r\n   * Formata a data de upload\r\n   */\r\n  formatUploadDate(date: Date): string {\r\n    return date.toLocaleDateString('pt-BR', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n}\r\n\r\n// Inst√¢ncia global do servi√ßo\r\nexport const fileListService = new FileListService();\r\n"],"names":["R2_ENDPOINT","R2_BUCKET","R2_ACCESS_KEY_ID","process","R2_SECRET_ACCESS_KEY","AWS","window","fileListService","getS3Client","Error","config","update","accessKeyId","secretAccessKey","region","S3","endpoint","s3ForcePathStyle","signatureVersion","listFiles","prefix","arguments","length","undefined","maxKeys","_result$Contents","console","log","s3","this","params","_objectSpread","Bucket","MaxKeys","Prefix","result","Promise","resolve","reject","listObjectsV2","err","data","Contents","success","files","map","obj","key","Key","name","includes","split","pop","isImage","isImageFile","isDocument","isDocumentFile","isArchive","isArchiveFile","size","Size","type","getFileType","url","concat","uploadedAt","Date","LastModified","error","message","listRootFiles","filter","file","listFolderFiles","folder","endsWith","filename","ext","toLowerCase","substring","lastIndexOf","formatFileSize","bytes","i","Math","floor","parseFloat","pow","toFixed","formatUploadDate","date","toLocaleDateString","day","month","year","hour","minute"],"sourceRoot":""}